#version 430 core

layout(local_size_x = 256) in;

struct Particle {
    vec3 position;
    float padding1;
    vec3 velocity;
    float padding2;
    vec3 predictedPos;
    float padding3;
    vec3 color;
    float padding4;
    float density;
    float lambda;
    vec2 padding5;
};

layout(std140, binding = 0) uniform SimulationParams {
    float dt;
    float _pad0;
    float _pad1;
    float _pad2;

    vec4 gravity;

    float particleRadius;
    float h;
    float _pad3;
    float _pad4;

    vec4 minBoundary;
    vec4 maxBoundary;

    uint numParticles;
    float cellSize;
    uint maxParticlesPerCell;
    float restDensity;

    float vorticityEpsilon;
    float xsphViscosityCoeff;
    float _pad5;
    float _pad6; 
};

layout(std430, binding = 1) buffer ParticleBuffer {
    Particle particles[];
};

layout(std430, binding = 2) buffer CellCounts {
    uint cellCounts[];
};

layout(std430, binding = 3) buffer CellParticles {
    uint cellParticles[];
};

// Poly6 kernel for density
float W_Poly6(float r, float h) {
    if(r > h) return 0.0;
    float term = h*h - r*r;
    return 315.0f / (64.0f * 3.14159f * pow(h, 9)) * term * term * term;
}

// Spiky kernel gradient for pressure forces
vec3 gradW_Spiky(vec3 r, float rlen, float h) {
    if(rlen > h || rlen < 0.0001) return vec3(0.0);
    
    float h2 = h*h;
    float h6 = h2*h2*h2;
    
    float factor = -45.0/(3.14159 * h6) * pow(h - rlen, 2);
    return factor * r / max(rlen, 0.0001);
}

//calculate cell index from position
uint getCellIndex(vec3 position) {
    ivec3 cellPos = ivec3(floor((position - minBoundary.xyz) / cellSize));
    ivec3 gridDim = ivec3(ceil((maxBoundary.xyz - minBoundary.xyz) / cellSize));
    cellPos = clamp(cellPos, ivec3(0), gridDim - ivec3(1));
    return uint(cellPos.x + cellPos.y * gridDim.x + cellPos.z * gridDim.x * gridDim.y);
}

float calculateBoundaryDensity(vec3 pos) {
    float boundaryDensity = 0.0;
    
    // Distance to boundaries
    float distToBottom = pos.y - minBoundary.y;
    float distToLeft = pos.x - minBoundary.x;
    float distToRight = maxBoundary.x - pos.x;
    float distToFront = pos.z - minBoundary.z;
    float distToBack = maxBoundary.z - pos.z;
    
    // Add density contribution based on proximity to boundaries
    // Use a smooth falloff based on distance to boundary
    if(distToBottom < h) {
        boundaryDensity += (1.0 - distToBottom/h) * 0.5;
    }
    if(distToLeft < h) {
        boundaryDensity += (1.0 - distToLeft/h) * 0.5;
    }
    if(distToRight < h) {
        boundaryDensity += (1.0 - distToRight/h) * 0.5;
    }
    if(distToFront < h) {
        boundaryDensity += (1.0 - distToFront/h) * 0.5;
    }
    if(distToBack < h) {
        boundaryDensity += (1.0 - distToBack/h) * 0.5;
    }
    
    return boundaryDensity;
}

void main() {
    uint id = gl_GlobalInvocationID.x;
    if (id >= numParticles) return;
    
    vec3 pos = particles[id].predictedPos;
    
    ivec3 cellPos = ivec3(floor((pos - minBoundary.xyz) / cellSize));
    ivec3 gridDim = ivec3(ceil((maxBoundary.xyz - minBoundary.xyz) / cellSize));
    
    float density = 0.0;
    
    density += W_Poly6(0.0, h);
    
    //3x3x3 grid
    for (int x = -1; x <= 1; x++) {
        for (int y = -1; y <= 1; y++) {
            for (int z = -1; z <= 1; z++) {
                ivec3 neighborCellPos = cellPos + ivec3(x, y, z);
                
                // Skip invalid cells
                if (any(lessThan(neighborCellPos, ivec3(0))) || any(greaterThanEqual(neighborCellPos, gridDim)))
                    continue;
                    
                uint neighborCellIndex = getCellIndex(pos + vec3(x,y,z) * cellSize);
                uint particlesInCell = cellCounts[neighborCellIndex];
                
                //Particles in cell
                for (uint j = 0; j < particlesInCell && j < maxParticlesPerCell; j++) {
                    uint neighborId = cellParticles[neighborCellIndex * maxParticlesPerCell + j];
                    
                    if (neighborId == id) continue;
                    
                    vec3 neighborPos = particles[neighborId].predictedPos;
                    vec3 diff = pos - neighborPos;
                    float dist = length(diff);
                    
                    //density contribution
                    if (dist < h) {
                        density += W_Poly6(dist, h);
                    }
                }
            }
        }
    }
    
    density += calculateBoundaryDensity(pos);
    
    particles[id].density = density;
    
    //constraint value C_i (density/rest_density - 1)
    float C = density/restDensity - 1.0;
    
    //if no pressure correction needed (slightly negative allowed)
    if (C <= -0.1) {
        particles[id].lambda = 0.0;
        return;
    }
    
    //gradient sum for lambda denominator
    float gradientSum = 0.0;
    
    //recalculate gradient sum using spiky kernel
    for (int x = -1; x <= 1; x++) {
        for (int y = -1; y <= 1; y++) {
            for (int z = -1; z <= 1; z++) {
                ivec3 neighborCellPos = cellPos + ivec3(x, y, z);
                
                if (any(lessThan(neighborCellPos, ivec3(0))) || any(greaterThanEqual(neighborCellPos, gridDim)))
                    continue;
                    
                uint neighborCellIndex = getCellIndex(pos + vec3(x,y,z) * cellSize);
                uint particlesInCell = cellCounts[neighborCellIndex];
                
                for (uint j = 0; j < particlesInCell && j < maxParticlesPerCell; j++) {
                    uint neighborId = cellParticles[neighborCellIndex * maxParticlesPerCell + j];
                    
                    vec3 neighborPos = particles[neighborId].predictedPos;
                    vec3 diff = pos - neighborPos;
                    float dist = length(diff);
                    
                    if (dist < h) {
                        //gradient
                        vec3 gradW = gradW_Spiky(diff, dist, h);
                        
                        //squared gradient magnitude to sum (divided by rest density) equation 11
                        gradientSum += dot(gradW, gradW);
                    }
                }
            }
        }
    }
    
    //small epsilon term for numerical stability (CFM)
    float epsilon = 0.1; 

    
    //Calculate lambda according to equation 11
    particles[id].lambda = -C / (gradientSum + epsilon);
}