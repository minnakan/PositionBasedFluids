#version 430 core

layout(local_size_x = 256) in;

struct Particle {
    vec3 position;
    float padding1;
    vec3 velocity;
    float padding2;
    vec3 predictedPos;
    float padding3;
    vec3 color;
    float padding4;
    float density;
    float lambda;
    vec2 padding5;
};

// Input particles
layout(std430, binding = 0) readonly buffer ParticleBuffer {
    Particle particles[];
};

// Input surface flags
layout(std430, binding = 1) readonly buffer SurfaceFlagsBuffer {
    int surfaceFlags[];
};

// Output smoothed centers
layout(std430, binding = 2) writeonly buffer SmoothedCentersBuffer {
    vec4 smoothedCenters[];
};

// Uniforms
uniform uint numParticles;
uniform float smoothingRadius;
uniform float lambda = 0.9; // Smoothing factor (0.9 to 1.0 as recommended in the paper)

void main() {
    uint id = gl_GlobalInvocationID.x;
    if (id >= numParticles) return;
    
    // For interior particles, no need to smooth - just copy position
    if (surfaceFlags[id] == 0) {
        smoothedCenters[id] = vec4(particles[id].position, 1.0);
        return;
    }
    
    // For surface particles, compute weighted average of neighbor positions
    vec3 particlePos = particles[id].position;
    vec3 weightedSum = vec3(0.0);
    float totalWeight = 0.0;
    
    // Loop through all other particles to find neighbors
    for (uint j = 0; j < numParticles; j++) {
        if (id == j) continue;
        
        vec3 neighborPos = particles[j].position;
        float dist = distance(particlePos, neighborPos);
        
        // Apply cubic kernel weight function for particles within the smoothing radius
        if (dist < smoothingRadius) {
            // Weight function: (1 - r/h)³
            float weight = pow(1.0 - dist / smoothingRadius, 3.0);
            weightedSum += weight * neighborPos;
            totalWeight += weight;
        }
    }
    
    // Apply Laplacian smoothing (Equation 6 in the paper)
    vec3 smoothedPos;
    if (totalWeight > 0.0) {
        vec3 weightedMean = weightedSum / totalWeight;
        // Mix original position with weighted mean based on lambda
        smoothedPos = (1.0 - lambda) * particlePos + lambda * weightedMean;
    } else {
        // If no neighbors, use original position
        smoothedPos = particlePos;
    }
    
    smoothedCenters[id] = vec4(smoothedPos, 1.0);
}