#version 430 core

layout(local_size_x = 256) in;

struct Particle {
    vec3 position;
    float padding1;
    vec3 velocity;
    float padding2;
    vec3 predictedPos;
    float padding3;
    vec3 color;
    float padding4;
    float density;
    float lambda;
    vec2 padding5;
};

layout(std140, binding = 0) uniform SimulationParams {
    float dt;
    float _pad0;
    float _pad1;
    float _pad2;

    vec4 gravity;

    float particleRadius;
    float h;
    float _pad3;
    float _pad4;

    vec4 minBoundary;
    vec4 maxBoundary;

    uint numParticles;
    float cellSize;
    uint maxParticlesPerCell;
    float restDensity;

    float vorticityEpsilon;
    float xsphViscosityCoeff;
    float _pad5;
    float _pad6; 
};

layout(std430, binding = 1) buffer ParticleBuffer {
    Particle particles[];
};

void main() {
    uint id = gl_GlobalInvocationID.x;
    if (id >= numParticles) return;
    
    vec3 positionChange = particles[id].predictedPos - particles[id].position;
    
    particles[id].velocity = positionChange / dt;
        
    particles[id].position = particles[id].predictedPos;
}