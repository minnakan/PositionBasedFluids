#version 430 core

layout(local_size_x = 256) in;

struct Particle {
    vec3 position;
    float padding1;
    vec3 velocity;
    float padding2;
    vec3 predictedPos;
    float padding3;
    vec3 color;
    float padding4;
    float density;
    float lambda;
    vec2 padding5;
};

layout(std140, binding = 0) uniform SimulationParams {
    float dt;
    float _pad0;
    float _pad1;
    float _pad2;

    vec4 gravity;

    float particleRadius;
    float h;
    float _pad3;
    float _pad4;

    vec4 minBoundary;
    vec4 maxBoundary;

    uint numParticles;
    float cellSize;
    uint maxParticlesPerCell;
    float restDensity;
};

layout(std430, binding = 1) buffer ParticleBuffer {
    Particle particles[];
};

void main() {
    uint id = gl_GlobalInvocationID.x;
    if (id >= numParticles) return;
    
    // Calculate position change
    vec3 positionChange = particles[id].predictedPos - particles[id].position;
    
    // Update velocity based on position change (v = dx/dt)
    // Use a smoothing factor to avoid abrupt velocity changes
    float smoothingFactor = 1;
    vec3 newVelocity = positionChange / dt;
    particles[id].velocity = mix(particles[id].velocity, newVelocity, smoothingFactor);
    
    
    // Apply vorticity confinement (simplified)
    // This helps preserve natural fluid motion and counter numerical dissipation
    
    // Apply XSPH viscosity - makes particles move more cohesively
    // We'll implement a simplified version directly here
    float viscosityStrength = 0.01;
    particles[id].velocity *= (1.0 - viscosityStrength);
        
    // Boundary velocity handling - if the particle is very close to boundary, 
    // reduce perpendicular velocity component to prevent sticking
    float boundaryThreshold = particleRadius * 2.0;
    
    // Bottom boundary
    if (particles[id].position.y - minBoundary.y < boundaryThreshold) {
        if (particles[id].velocity.y < 0) {
            particles[id].velocity.y *= 0.8; // Reduce downward velocity near the floor
        }
    }
    
    // Left boundary
    if (particles[id].position.x - minBoundary.x < boundaryThreshold) {
        if (particles[id].velocity.x < 0) {
            particles[id].velocity.x *= 0.8;
        }
    }
    
    // Right boundary
    if (maxBoundary.x - particles[id].position.x < boundaryThreshold) {
        if (particles[id].velocity.x > 0) {
            particles[id].velocity.x *= 0.8;
        }
    }
    
    // Front boundary
    if (particles[id].position.z - minBoundary.z < boundaryThreshold) {
        if (particles[id].velocity.z < 0) {
            particles[id].velocity.z *= 0.8;
        }
    }
    
    // Back boundary
    if (maxBoundary.z - particles[id].position.z < boundaryThreshold) {
        if (particles[id].velocity.z > 0) {
            particles[id].velocity.z *= 0.8;
        }
    }
    
    // Update the actual position
    particles[id].position = particles[id].predictedPos;
}