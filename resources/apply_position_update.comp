#version 430 core

layout(local_size_x = 256) in;

struct Particle {
    vec3 position;
    float padding1;
    vec3 velocity;
    float padding2;
    vec3 predictedPos;
    float padding3;
    vec3 color;
    float padding4;
    float density;
    float lambda;
    vec2 padding5;
};

layout(std140, binding = 0) uniform SimulationParams {
    float dt;
    float _pad0;
    float _pad1;
    float _pad2;

    vec4 gravity;

    float particleRadius;
    float h;
    float _pad3;
    float _pad4;

    vec4 minBoundary;
    vec4 maxBoundary;

    uint numParticles;
    float cellSize;
    uint maxParticlesPerCell;
    float restDensity;
};

layout(std430, binding = 1) buffer ParticleBuffer {
    Particle particles[];
};

layout(std430, binding = 2) buffer CellCounts {
    uint cellCounts[];
};

layout(std430, binding = 3) buffer CellParticles {
    uint cellParticles[];
};

// Spiky kernel gradient for pressure forces
vec3 gradW_Spiky(vec3 r, float rlen, float h) {
    if(rlen > h || rlen < 0.0001) return vec3(0.0);
    
    float h2 = h*h;
    float h6 = h2*h2*h2;
    
    float factor = -45.0/(3.14159 * h6) * pow(h - rlen, 2);
    return factor * r / max(rlen, 0.0001);
}

// Poly6 kernel for artificial pressure term
float W_Poly6(float r, float h) {
    if(r > h) return 0.0;
    float term = h*h - r*r;
    return 315.0f / (64.0f * 3.14159f * pow(h, 9)) * term * term * term;
}

// Utility function to calculate cell index from position
uint getCellIndex(vec3 position) {
    ivec3 cellPos = ivec3(floor((position - minBoundary.xyz) / cellSize));
    ivec3 gridDim = ivec3(ceil((maxBoundary.xyz - minBoundary.xyz) / cellSize));
    cellPos = clamp(cellPos, ivec3(0), gridDim - ivec3(1));
    return uint(cellPos.x + cellPos.y * gridDim.x + cellPos.z * gridDim.x * gridDim.y);
}

// Improved wall repulsion function
vec3 calculateWallRepulsion(vec3 pos) {
    vec3 repulsion = vec3(0.0);
    float wallRepulsionStrength = 1.0; // Reduced strength to avoid excessive forces
    float maxInfluenceDistance = 1.5 * particleRadius; // Tighter influence zone
    
    // Floor repulsion
    float distToFloor = pos.y - (minBoundary.y + particleRadius);
    if (distToFloor < maxInfluenceDistance) {
        float repulsionForce = (1.0 - distToFloor/maxInfluenceDistance) * wallRepulsionStrength;
        repulsion.y += repulsionForce;
    }
    
    // Left wall repulsion
    float distToLeftWall = pos.x - (minBoundary.x + particleRadius);
    if (distToLeftWall < maxInfluenceDistance) {
        float repulsionForce = (1.0 - distToLeftWall/maxInfluenceDistance) * wallRepulsionStrength;
        repulsion.x += repulsionForce;
    }
    
    // Right wall repulsion
    float distToRightWall = (maxBoundary.x - particleRadius) - pos.x;
    if (distToRightWall < maxInfluenceDistance) {
        float repulsionForce = (1.0 - distToRightWall/maxInfluenceDistance) * wallRepulsionStrength;
        repulsion.x -= repulsionForce;
    }
    
    // Front wall repulsion
    float distToFrontWall = pos.z - (minBoundary.z + particleRadius);
    if (distToFrontWall < maxInfluenceDistance) {
        float repulsionForce = (1.0 - distToFrontWall/maxInfluenceDistance) * wallRepulsionStrength;
        repulsion.z += repulsionForce;
    }
    
    // Back wall repulsion
    float distToBackWall = (maxBoundary.z - particleRadius) - pos.z;
    if (distToBackWall < maxInfluenceDistance) {
        float repulsionForce = (1.0 - distToBackWall/maxInfluenceDistance) * wallRepulsionStrength;
        repulsion.z -= repulsionForce;
    }
    
    return repulsion;
}

void main() {
    uint id = gl_GlobalInvocationID.x;
    if (id >= numParticles) return;
    
    // Get particle position
    vec3 pos = particles[id].predictedPos;
    
    // Get cell position and grid dimensions
    ivec3 cellPos = ivec3(floor((pos - minBoundary.xyz) / cellSize));
    ivec3 gridDim = ivec3(ceil((maxBoundary.xyz - minBoundary.xyz) / cellSize));
    
    // Initialize position change
    vec3 deltaPos = vec3(0.0);
    
    // Loop through neighboring cells (3x3x3 grid)
    for (int x = -1; x <= 1; x++) {
        for (int y = -1; y <= 1; y++) {
            for (int z = -1; z <= 1; z++) {
                ivec3 neighborCellPos = cellPos + ivec3(x, y, z);
                
                // Skip invalid cells
                if (any(lessThan(neighborCellPos, ivec3(0))) || 
                    any(greaterThanEqual(neighborCellPos, gridDim)))
                    continue;
                    
                uint neighborCellIndex = getCellIndex(pos + vec3(x,y,z) * cellSize);
                uint particlesInCell = cellCounts[neighborCellIndex];
                
                // Loop through particles in this cell
                for (uint j = 0; j < particlesInCell && j < maxParticlesPerCell; j++) {
                    uint neighborId = cellParticles[neighborCellIndex * maxParticlesPerCell + j];
                    
                    // Skip self
                    if (neighborId == id) continue;
                    
                    vec3 neighborPos = particles[neighborId].predictedPos;
                    vec3 diff = pos - neighborPos;
                    float dist = length(diff);
                    
                    // Process particles within kernel radius
                    if (dist < h && dist > 0.0001) {
                        // Calculate gradient of Spiky kernel
                        vec3 gradW = gradW_Spiky(diff, dist, h);
                        
                        // Get lambda values from both particles
                        float lambdaSum = particles[id].lambda + particles[neighborId].lambda;
                        
                        // Calculate artificial pressure term (s_corr) from equation 13
                        float k = 0.2;      // Reduced from 0.2 to lower artificial pressure
                        float n = 4.0;      // Power parameter
                        float deltaq = 0.2 * h;  // Target sampling distance
                        
                        float wij = W_Poly6(dist, h);
                        float wdeltaq = W_Poly6(deltaq, h);
                        
                        // Prevent division by zero
                        if (wdeltaq > 0.0) {
                            float scorr = -k * pow(wij / wdeltaq, n);
                            
                            // Calculate particle position correction
                            deltaPos += (lambdaSum + scorr) * gradW;
                        }
                    }
                }
            }
        }
    }
    
    // Scale by 1/restDensity
    deltaPos /= restDensity;
    
    // Add wall repulsion forces with reduced effect
    vec3 wallRepulsion = calculateWallRepulsion(pos);
    deltaPos += wallRepulsion * 0.005; // Significantly reduced scale factor
    
    // Apply position correction
    particles[id].predictedPos += deltaPos;
    
    // Apply boundary constraints more firmly (hard constraints)
    float safetyMargin = 0.1 * particleRadius;
    
    // Floor constraint - more definitive
    if (particles[id].predictedPos.y < minBoundary.y + particleRadius) {
        particles[id].predictedPos.y = minBoundary.y + particleRadius + safetyMargin;
    }
    
    // X-axis boundaries (left and right walls)
    if (particles[id].predictedPos.x < minBoundary.x + particleRadius) {
        particles[id].predictedPos.x = minBoundary.x + particleRadius + safetyMargin;
    }
    if (particles[id].predictedPos.x > maxBoundary.x - particleRadius) {
        particles[id].predictedPos.x = maxBoundary.x - particleRadius - safetyMargin;
    }
    
    // Z-axis boundaries (front and back walls)
    if (particles[id].predictedPos.z < minBoundary.z + particleRadius) {
        particles[id].predictedPos.z = minBoundary.z + particleRadius + safetyMargin;
    }
    if (particles[id].predictedPos.z > maxBoundary.z - particleRadius) {
        particles[id].predictedPos.z = maxBoundary.z - particleRadius - safetyMargin;
    }
    
    // Update color based on position change magnitude (for visualization)
    float deltaMag = length(deltaPos);
    
    // Visual feedback: color gradient from blue to red based on position correction magnitude
    if (deltaMag > 0.0) {
        float normalizedDelta = min(deltaMag * 50.0, 1.0);
        //particles[id].color = mix(vec3(0.0, 0.0, 1.0), vec3(1.0, 0.0, 0.0), normalizedDelta);
    }
}