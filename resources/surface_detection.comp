#version 430 core

layout(local_size_x = 256) in;

struct Particle {
    vec3 position;
    float padding1;
    vec3 velocity;
    float padding2;
    vec3 predictedPos;
    float padding3;
    vec3 color;
    float padding4;
    float density;
    float lambda;
    vec2 padding5;
};

// Input particles
layout(std430, binding = 0) readonly buffer ParticleBuffer {
    Particle particles[];
};

// Output surface flags
layout(std430, binding = 1) writeonly buffer SurfaceFlagsBuffer {
    int surfaceFlags[];  // Make sure this is int to match GLint in C++
};

// Uniforms
uniform uint numParticles;  // This is uint, requiring glUniform1ui
uniform float neighborRadius;
uniform int neighborThreshold;

void main() {
    uint id = gl_GlobalInvocationID.x;
    if (id >= numParticles) return;
    
    // Count neighbors within radius
    int neighborCount = 0;
    vec3 particlePos = particles[id].position;
    
    for (uint j = 0; j < numParticles; j++) {
        if (id == j) continue;
        
        vec3 neighborPos = particles[j].position;
        float dist = distance(particlePos, neighborPos);
        
        if (dist < neighborRadius) {
            neighborCount++;
        }
    }
    
    // Mark as surface particle if fewer than threshold neighbors
    surfaceFlags[id] = (neighborCount < neighborThreshold) ? 1 : 0;
}