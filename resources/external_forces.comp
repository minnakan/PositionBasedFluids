#version 430 core

layout(local_size_x = 256) in;

struct Particle {
    vec3 position;
    float padding1;
    vec3 velocity;
    float padding2;
    vec3 predictedPos;
    float padding3;
    vec3 color;
    float padding4;
    float density;
    float lambda;
    vec2 padding5;
};

layout(std140, binding = 0) uniform SimulationParams {
    float dt;
    float _pad0;
    float _pad1;
    float _pad2;

    vec4 gravity;

    float particleRadius;
    float h;
    float _pad3;
    float _pad4;

    vec4 minBoundary;
    vec4 maxBoundary;

    uint numParticles;
    float cellSize;
    uint maxParticlesPerCell;
    float restDensity;

    float vorticityEpsilon;
    float xsphViscosityCoeff;
    float _pad5;
    float _pad6; 
};

layout(std430, binding = 1) buffer ParticleBuffer {
    Particle particles[];
};

void main() {
    uint id = gl_GlobalInvocationID.x;
    if (id >= numParticles) return;
    
    // Apply external forces (gravity)
    particles[id].velocity += gravity.xyz * dt;
    
    // Reset predicted position
    particles[id].predictedPos = particles[id].position;
    
    // Update predicted position based on velocity
    particles[id].predictedPos += particles[id].velocity * dt;
    
    // Simple boundary handling with bounce effect
    float boundaryDamping = 0.5;  // Simplified damping parameter
    
    // Simple position clamping for all boundaries
    if (particles[id].predictedPos.y < minBoundary.y + particleRadius) {
        particles[id].predictedPos.y = minBoundary.y + particleRadius;
        particles[id].velocity.y = -particles[id].velocity.y * boundaryDamping;
        
        // Simple floor friction
        particles[id].velocity.xz *= 0.9;
    }
    
    // X boundaries (combined checks)
    if (particles[id].predictedPos.x < minBoundary.x + particleRadius) {
        particles[id].predictedPos.x = minBoundary.x + particleRadius;
        particles[id].velocity.x = -particles[id].velocity.x * boundaryDamping;
    } 
    else if (particles[id].predictedPos.x > maxBoundary.x - particleRadius) {
        particles[id].predictedPos.x = maxBoundary.x - particleRadius;
        particles[id].velocity.x = -particles[id].velocity.x * boundaryDamping;
    }
    
    // Z boundaries (combined checks)
    if (particles[id].predictedPos.z < minBoundary.z + particleRadius) {
        particles[id].predictedPos.z = minBoundary.z + particleRadius;
        particles[id].velocity.z = -particles[id].velocity.z * boundaryDamping;
    } 
    else if (particles[id].predictedPos.z > maxBoundary.z - particleRadius) {
        particles[id].predictedPos.z = maxBoundary.z - particleRadius;
        particles[id].velocity.z = -particles[id].velocity.z * boundaryDamping;
    }
}