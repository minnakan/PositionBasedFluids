#version 430 core

layout(local_size_x = 256) in;

struct Particle {
    vec3 position;
    float padding1;
    vec3 velocity;
    float padding2;
    vec3 predictedPos;
    float padding3;
    vec3 color;
    float padding4;
    float density;
    float lambda;
    vec2 padding5;
};

layout(std140, binding = 0) uniform SimulationParams {
    float dt;
    float _pad0;
    float _pad1;
    float _pad2;

    vec4 gravity;

    float particleRadius;
    float h;
    float _pad3;
    float _pad4;

    vec4 minBoundary;
    vec4 maxBoundary;

    uint numParticles;
    float cellSize;
    uint maxParticlesPerCell;
    float restDensity;
};

layout(std430, binding = 1) buffer ParticleBuffer {
    Particle particles[];
};

void main() {
    uint id = gl_GlobalInvocationID.x;
    if (id >= numParticles) return;
    
    // Apply external forces (gravity) with slight damping to avoid instability
    // Damped gravity to help prevent boundary issues
    particles[id].velocity += gravity.xyz * dt;//* 0.98;
    
    // IMPORTANT: Reset predicted position to current position at the start of each step
    particles[id].predictedPos = particles[id].position;
    
    // Update predicted position based on velocity
    particles[id].predictedPos += particles[id].velocity * dt;
    
    // Define boundary parameters - modified for better response
    float boundaryDamping = 0.75;    // Increased damping for more energy loss at boundaries
    float repulsionStrength = 0.15; // Adjusted repulsion strength
    float safetyMargin = 0.1;       // Increased safety margin
    
    // Floor constraint with bounce effect
    if (particles[id].predictedPos.y < minBoundary.y + particleRadius) {
        // Distance penetrated into the boundary
        float penetrationDepth = (minBoundary.y + particleRadius) - particles[id].predictedPos.y;
        
        // Push particle out with extra safety margin
        particles[id].predictedPos.y = minBoundary.y + particleRadius + safetyMargin * particleRadius;
        
        // Bounce with damping - more energy loss
        particles[id].velocity.y = -particles[id].velocity.y * boundaryDamping;
        
        // Add small upward impulse based on penetration depth for stability
        particles[id].velocity.y += penetrationDepth * repulsionStrength;
        
        // Add lateral friction when hitting the floor - to prevent sliding
        particles[id].velocity.x *= 0.9;
        particles[id].velocity.z *= 0.9;
    }
    
    // X-axis boundaries (left and right walls)
    if (particles[id].predictedPos.x < minBoundary.x + particleRadius) {
        float penetrationDepth = (minBoundary.x + particleRadius) - particles[id].predictedPos.x;
        particles[id].predictedPos.x = minBoundary.x + particleRadius + safetyMargin * particleRadius;
        particles[id].velocity.x = -particles[id].velocity.x * boundaryDamping;
        particles[id].velocity.x += penetrationDepth * repulsionStrength;
    }
    
    if (particles[id].predictedPos.x > maxBoundary.x - particleRadius) {
        float penetrationDepth = particles[id].predictedPos.x - (maxBoundary.x - particleRadius);
        particles[id].predictedPos.x = maxBoundary.x - particleRadius - safetyMargin * particleRadius;
        particles[id].velocity.x = -particles[id].velocity.x * boundaryDamping;
        particles[id].velocity.x -= penetrationDepth * repulsionStrength;
    }
    
    // Z-axis boundaries (front and back walls)
    if (particles[id].predictedPos.z < minBoundary.z + particleRadius) {
        float penetrationDepth = (minBoundary.z + particleRadius) - particles[id].predictedPos.z;
        particles[id].predictedPos.z = minBoundary.z + particleRadius + safetyMargin * particleRadius;
        particles[id].velocity.z = -particles[id].velocity.z * boundaryDamping;
        particles[id].velocity.z += penetrationDepth * repulsionStrength;
    }
    
    if (particles[id].predictedPos.z > maxBoundary.z - particleRadius) {
        float penetrationDepth = particles[id].predictedPos.z - (maxBoundary.z - particleRadius);
        particles[id].predictedPos.z = maxBoundary.z - particleRadius - safetyMargin * particleRadius;
        particles[id].velocity.z = -particles[id].velocity.z * boundaryDamping;
        particles[id].velocity.z -= penetrationDepth * repulsionStrength;
    }
    
    // IMPORTANT: Velocity damping to prevent energy buildup in the system
    particles[id].velocity *= 0.995; // Small global damping
    
    // Additional velocity cap to prevent excessive speeds
    float maxVelocity = 10.0; // Reduced from 10.0
    float currentSpeed = length(particles[id].velocity);
    if (currentSpeed > maxVelocity) {
        particles[id].velocity = (particles[id].velocity / currentSpeed) * maxVelocity;
    }
}